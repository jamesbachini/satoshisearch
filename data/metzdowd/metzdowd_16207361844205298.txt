<PRE>Arshad Noor wrote:
&gt;<i> Ben Laurie wrote:
</I>&gt;&gt;<i> Arshad Noor wrote:
</I>&gt;&gt;&gt;<i>
</I>&gt;&gt;&gt;<i> I may be a little naive, but can a protocol itself enforce proper
</I>&gt;&gt;&gt;<i> key-management?  I can certainly see it facilitating the required
</I>&gt;&gt;&gt;<i> discipline, but I can't see how a protocol alone can enforce it.
</I>&gt;&gt;<i>
</I>&gt;&gt;<i> I find the question difficult to understand. Before I could even begin 
</I>&gt;&gt;<i> to answer, you'd have to define what &quot;proper key management&quot; actually is.
</I>&gt;<i> 
</I>&gt;<i> I consider KM to be the discipline of defining policy and establishing
</I>&gt;<i> procedures &amp; infrastructure for the generation, use, escrow, recovery
</I>&gt;<i> and destruction of cryptographic keys, in conformance with the defined
</I>&gt;<i> policies.
</I>
Then I would agree that a protocol alone could not achieve all of this, 
though obviously it is possible to design a protocol that makes it 
impossible.

&gt;&gt;<i> That said, EKMI (from my brief reading) has a view of key management 
</I>&gt;&gt;<i> that is only &quot;proper&quot; in quite constrained circumstances. In 
</I>&gt;&gt;<i> particular, keys are available to participants other than those who 
</I>&gt;&gt;<i> are communicating, which is general considered to be a very bad idea. 
</I>&gt;<i> 
</I>&gt;<i> I'm not sure I'm following your comment here, Ben.  Did some word get
</I>&gt;<i> left out?  In EKMI, keys are available only to those who are known to
</I>&gt;<i> the central Symmetric Key Services (SKS) server,  and who are authorized
</I>&gt;<i> to receive keys.  The &quot;knowledge&quot; comes from entries in the SKS server
</I>&gt;<i> about the clients and their digital certificates.  The authorization
</I>&gt;<i> comes from ACLs and from policies that apply to the client.
</I>
OK, so you still have a PKI problem, in that you have to issue and 
manage client certificates. How is this done?

 &gt; So, yes,
&gt;<i> EKMIs are designed for constrained environments.
</I>&gt;<i> 
</I>&gt;&gt;<i>
</I>&gt;&gt;&gt;<i> The design paradigm we chose for EKMI was to have:
</I>&gt;&gt;&gt;<i>
</I>&gt;&gt;&gt;<i> 1) the centralized server be the focal point for defining policy;
</I>&gt;&gt;&gt;<i> 2) the protocol carry the payload with its corresponding policy;
</I>&gt;&gt;&gt;<i> 3) and the client library enforce the policy on client devices;
</I>&gt;&gt;&gt;<i>
</I>&gt;&gt;<i>
</I>&gt;&gt;<i> Well. You said &quot;centralized server&quot;. Many cryptographic systems don't 
</I>&gt;&gt;<i> have one of those.
</I>&gt;&gt;<i>
</I>&gt;<i> 
</I>&gt;<i> I realizecd that two years ago when I started defining the architecture
</I>&gt;<i> for EKMI and the software to implement it.  It was the only logical way
</I>&gt;<i> of addressing the business problem of managing encryption keys for five
</I>&gt;<i> different platforms/applications that needed to share ciphertext on a
</I>&gt;<i> daily basis across hundreds of locations and thousands of POS registers.
</I>
I'd be very surprised if it were the _only_ logical way to do it. But 
that aside, my point stands: these characteristics are not shared by all 
cryptographic systems. In fact, I'd say that all of them are not shared 
by most cryptographic systems.

&gt;&gt;<i> Also, the idea of a client library enforcing policy is DRM all over 
</I>&gt;&gt;<i> again. Which, as we all know, will never work.
</I>&gt;<i> 
</I>&gt;<i> You make an interesting point here.  While, conceptually, EKMI and DRM
</I>&gt;<i> share similar designs, I believe the reasons for DRM's failure has more
</I>&gt;<i> to do with philosophy than with technology.  But that's a different
</I>&gt;<i> debate.
</I>
I do not believe this is the case. DRM fails because the attacker has 
physical possession of the system he is attacking.

The fact that the attackers is highly motivated because of the 
objectionable nature of DRM does not seem to differ much from your 
system, though in your case the motivator will presumably be profit.

&gt;&gt;&gt;<i> P.S. Companies deploying an EKMI must have an external process in
</I>&gt;&gt;&gt;<i> place to ensure their applications are using &quot;verified&quot; libraries
</I>&gt;&gt;&gt;<i> on the client devices, so their polices are not subverted.
</I>&gt;&gt;<i>
</I>&gt;&gt;<i>
</I>&gt;&gt;<i> Ha ha. Like that's going to work. Even if we assume that libraries are 
</I>&gt;&gt;<i> verified (fat chance, IMO), how are you going to stop, for example, 
</I>&gt;&gt;<i> cut'n'paste? Employees reading things out over the phone? Bugs? Etc.
</I>&gt;&gt;<i>
</I>&gt;<i> 
</I>&gt;<i> EKMI's goals are not to provide bullet-proof security.  It has more
</I>&gt;<i> modest ambitions - to provide a management framework for incremental
</I>&gt;<i> security, targeted at the right resource: the data, rather than the 
</I>&gt;<i> network.
</I>
Are there any even vaguely modern systems that target the network for 
security, or is this a straw man?

 &gt;  As such, it will merely be a tool in the evolution towards
&gt;<i> more secure systems - how people use the tool is up to them.
</I>
If it is up to them, then why bother with this verification process? 
This sounds like yet more security theatre to me.

Cheers,

Ben.

-- 
<A HREF="http://www.apache-ssl.org/ben.html">http://www.apache-ssl.org/ben.html</A>           <A HREF="http://www.links.org/">http://www.links.org/</A>

&quot;There is no limit to what a man can do or how far he can go if he
doesn't mind who gets the credit.&quot; - Robert Woodruff

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>