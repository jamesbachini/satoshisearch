<PRE>On Sun, May 18, 2008 at 4:55 PM, &quot;Hal Finney&quot; &lt;<A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">hal at finney.org</A>&gt; wrote:

&gt;<i> A simple trick can be used to help immunize DSA signatures against
</I>&gt;<i> these kinds of failures. I first learned of this idea many years ago
</I>&gt;<i> from Phil Zimmermann, and a varient has been used for a long time in
</I>&gt;<i> PGP and probably other code, but aparently not OpenSSL. The idea is
</I>&gt;<i> to base the random k not just on the output of your RNG, but also on
</I>&gt;<i> the private key x. Something like:
</I>&gt;<i>
</I>&gt;<i> k = hash (x, rng()).
</I>&gt;<i>
</I>&gt;<i> Of course it is still necessary that k be uniformly distributed mod q
</I>&gt;<i> (the DSA subgroup prime order), so this can't be just a straight hash.
</I>&gt;<i> It might be a separate PRNG instance which gets seeded with the data
</I>&gt;<i> values shown.  But the idea is to mix in the secret key value, x, in
</I>&gt;<i> addition to data from the RNG.
</I>

I've used this idea before, although in the form of using the private
key as part of the PRNG seed -- which isn't of much use if the PRNG
ignores its seeding as in this case.  However, even the form

    k = hash (x, rng())

isn't good enough if the PRNG is sufficiently broken.  The Debian code
generated an output that was not merely predictable, but also prone to
repetition if you run a binary multiple times.  With typically just
2^15 different byte streams from the PRNG, by the birthday paradox
you'd have to expect to have been reusing some k after around 2^8
iterations or so.  So your DSA key would still be at risk!

You could also make k message-dependant -- i.e., feed both x and k
into the hash function:

    k = hash (x, rng(), m)

This avoids that problem, and is likely to remain unbreakable even if
rng() returns just some constant.  However, then you lose one
advantage of DSA, namely being able to do most of the computation in
advance, before you've even seen the message to be signed: If you've
obtained k and done the DSA exponentiation beforehand, you can create
signatures almost instantaneously; but this won't work if k depends on
the message.

Bodo

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>