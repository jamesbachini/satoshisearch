<PRE>On Wed, 13 Feb 2008 20:38:49 -0800
<A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">alex at alten.org</A> wrote:

&gt;<i> 
</I>&gt;<i> &gt; ----- Original Message -----
</I>&gt;<i> &gt; From: &quot;Pat Farrell&quot; &lt;<A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">pfarrell at pfarrell.com</A>&gt;
</I>&gt;<i> &gt; To: 
</I>&gt;<i> &gt; Subject: Re: Toshiba shows 2Mbps hardware RNG
</I>&gt;<i> &gt; Date: Sun, 10 Feb 2008 17:40:19 -0500
</I>&gt;<i> &gt; 
</I>&gt;<i> &gt; 
</I>&gt;<i> &gt; Perry E. Metzger wrote:
</I>&gt;<i> &gt; &gt; <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">pgut001 at cs.auckland.ac.nz</A> (Peter Gutmann) writes:
</I>&gt;<i> &gt; &gt;&gt; I've always wondered why RNG speed is such a big deal for
</I>&gt;<i> &gt; &gt;&gt; anything but a few highly specialised applications.
</I>&gt;<i> &gt; &gt;
</I>&gt;<i> &gt; &gt; Perhaps it isn't, but any hardware RNG is probably better than
</I>&gt;<i> &gt; &gt; none for many apps, and they've managed to put the whole thing in
</I>&gt;<i> &gt; &gt; a quite small bit of silicon. The speed is probably icing on the
</I>&gt;<i> &gt; &gt; cake.
</I>&gt;<i> &gt; 
</I>&gt;<i> &gt; One of the benefits of speed is that you can use cleanup code to 
</I>&gt;<i> &gt; control bias. Carl Ellison put some out on his website last century.
</I>&gt;<i> &gt; 
</I>&gt;<i> &gt; 
</I>&gt;<i> 
</I>&gt;<i> It is a HUGE win for designing a crypto system to have a really 
</I>&gt;<i> fast (and good) HW RNG. Being able to generate 10-20,000 AES keys
</I>&gt;<i> per second means that you can engineer things that were impossible
</I>&gt;<i> to do otherwise.  You can generate as many keys as you like, throw
</I>&gt;<i> away keys after one time use, treat them as ephemeral authentication
</I>&gt;<i> keys (say give a few million or so to a user), etc. Or you could 
</I>&gt;<i> hand a sender 10 MBytes (less than a minute to generate), which then
</I>&gt;<i> can be used to create billions of keys (say using Ueli Maurer's 
</I>&gt;<i> Bounded Storage Model).  The sender could then use each key to 
</I>&gt;<i> uniquely encrypt (AES CTR) each message of a series of messages or
</I>&gt;<i> packets to a receiver (AES key setup is fast). No need for an IV or 
</I>&gt;<i> worrying about message ordering (each one has a key id), or even the
</I>&gt;<i> compromise of a key or two.
</I>&gt;<i> 
</I>&gt;<i> Randomness is the most fundamental underpinning of a crypto system
</I>&gt;<i> and having lots of it on demand is really fabulous to have in our 
</I>&gt;<i> system security design tool box.
</I>&gt;<i> 
</I>Leaving aside whether or not your scenarios make sense, why must this
be done via a hardware RNG?

I ran 'openssl speed aes' on a 3.4 Ghz single-core Pentium.  On 16-byte
blocks with AES-128 -- i.e., running AES in counter mode to generate
128-bit keys -- it ran at about 3.4M encryptions/second.  That's more
than two orders of magnitude better than you say is needed.  Why do I
need hardware?

Hardware RNGs are great for producing initial seeds.  They're also
great for producing new randomness to stir into the pot (i.e., via
something like Yarrow).  But they're lousy for ongoing work because
they're relatively low assurance.

As others have noted, software has a big advantage: it's
deterministic.  Once you know its working, you have much higher
assurance that it will continue to work the same way.  (Aside: I know
quite a bit about the problem of certifying complex software.  A
cryptographically strong PRNG doesn't fall into that category if you
have confidence in the algorithm.)  Remember the Clipper chip?
According to Dorothy Denning, the escrowed keys -- that is, the entire
security of the basic scheme -- was generated by several applications of
the Skipjack, the underlying block cipher -- see
<A HREF="http://catless.ncl.ac.uk/Risks/14.52.html#subj1">http://catless.ncl.ac.uk/Risks/14.52.html#subj1</A> for details.  (Note:
that statement was later disavowed.  I'm not sure I believe the
disavowal; it looked secure to me.)

		--Steve Bellovin, <A HREF="http://www.cs.columbia.edu/~smb">http://www.cs.columbia.edu/~smb</A>

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>