<PRE>Ben Laurie wrote:
&gt;<i> Arshad Noor wrote:
</I>&gt;&gt;<i>
</I>&gt;&gt;<i> I may be a little naive, but can a protocol itself enforce proper
</I>&gt;&gt;<i> key-management?  I can certainly see it facilitating the required
</I>&gt;&gt;<i> discipline, but I can't see how a protocol alone can enforce it.
</I>&gt;<i> 
</I>&gt;<i> I find the question difficult to understand. Before I could even begin 
</I>&gt;<i> to answer, you'd have to define what &quot;proper key management&quot; actually is.
</I>&gt;<i> 
</I>
I consider KM to be the discipline of defining policy and establishing
procedures &amp; infrastructure for the generation, use, escrow, recovery
and destruction of cryptographic keys, in conformance with the defined
policies.

&gt;<i> That said, EKMI (from my brief reading) has a view of key management 
</I>&gt;<i> that is only &quot;proper&quot; in quite constrained circumstances. In particular, 
</I>&gt;<i> keys are available to participants other than those who are 
</I>&gt;<i> communicating, which is general considered to be a very bad idea. 
</I>
I'm not sure I'm following your comment here, Ben.  Did some word get
left out?  In EKMI, keys are available only to those who are known to
the central Symmetric Key Services (SKS) server, and who are authorized
to receive keys.  The &quot;knowledge&quot; comes from entries in the SKS server
about the clients and their digital certificates.  The authorization
comes from ACLs and from policies that apply to the client.  So, yes,
EKMIs are designed for constrained environments.

&gt;<i> 
</I>&gt;&gt;<i> The design paradigm we chose for EKMI was to have:
</I>&gt;&gt;<i>
</I>&gt;&gt;<i> 1) the centralized server be the focal point for defining policy;
</I>&gt;&gt;<i> 2) the protocol carry the payload with its corresponding policy;
</I>&gt;&gt;<i> 3) and the client library enforce the policy on client devices;
</I>&gt;&gt;<i>
</I>&gt;<i> 
</I>&gt;<i> Well. You said &quot;centralized server&quot;. Many cryptographic systems don't 
</I>&gt;<i> have one of those.
</I>&gt;<i> 
</I>
I realizecd that two years ago when I started defining the architecture
for EKMI and the software to implement it.  It was the only logical way
of addressing the business problem of managing encryption keys for five
different platforms/applications that needed to share ciphertext on a
daily basis across hundreds of locations and thousands of POS registers.

&gt;<i> Also, the idea of a client library enforcing policy is DRM all over 
</I>&gt;<i> again. Which, as we all know, will never work.
</I>
You make an interesting point here.  While, conceptually, EKMI and DRM
share similar designs, I believe the reasons for DRM's failure has more
to do with philosophy than with technology.  But that's a different
debate.

&gt;&gt;<i> P.S. Companies deploying an EKMI must have an external process in
</I>&gt;&gt;<i> place to ensure their applications are using &quot;verified&quot; libraries
</I>&gt;&gt;<i> on the client devices, so their polices are not subverted.
</I>&gt;<i> 
</I>&gt;<i> 
</I>&gt;<i> Ha ha. Like that's going to work. Even if we assume that libraries are 
</I>&gt;<i> verified (fat chance, IMO), how are you going to stop, for example, 
</I>&gt;<i> cut'n'paste? Employees reading things out over the phone? Bugs? Etc.
</I>&gt;<i> 
</I>
EKMI's goals are not to provide bullet-proof security.  It has more
modest ambitions - to provide a management framework for incremental
security, targeted at the right resource: the data, rather than the 
network.  As such, it will merely be a tool in the evolution towards
more secure systems - how people use the tool is up to them.

Arshad Noor
StrongAuth, Inc.

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>