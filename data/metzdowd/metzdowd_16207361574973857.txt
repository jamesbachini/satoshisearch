<PRE>On Mon, 29 Oct 2007, <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">travis+ml-cryptography at subspacefield.org</A> wrote:

&gt;<i> So back in the bad old days when hashing was DES encryption of the
</I>&gt;<i> zero vector with a fixed key, someone came up with salt as a password
</I>&gt;<i> strengthening mechanism.
</I>&gt;<i> 
</I>&gt;<i> I'm not quite sure why it was called salt.
</I>&gt;<i> 
</I>&gt;<i> It perturbed the S-boxes in DES IIRC, but essentially it was a known
</I>&gt;<i> bit of text that was an input to the algorithm that varied between
</I>&gt;<i> entries, like an IV does with encryption.
</I>&gt;<i> 
</I>&gt;<i> If there isn't already a term for this, I'm going to call this
</I>&gt;<i> general concept &quot;individuation&quot;, or possibly &quot;uniquification&quot;.
</I>&gt;<i> 
</I>&gt;<i> Nowadays with strong hash algorithms, but rainbow tables and
</I>&gt;<i> low-entropy passwords as the threat, I'm wondering what the best
</I>&gt;<i> practice is.
</I>
Use a good existing password hash (e.g. OpenBSD's bcrypt[1]) or some
well reviewed KDF (e.g. PKCS #5 PBKDF2[2]).

Perhaps I'm not imaginative enough, but I can't think of a use case
that is not covered by these algorithms. Given decent salt they
will not succumb to reverse (rainbow table) lookup and both include
parametised computation complexity to drive up the cost of brute
force attacks.

-d

[1] <A HREF="http://www.openbsd.org/papers/bcrypt-paper.ps">http://www.openbsd.org/papers/bcrypt-paper.ps</A>
[2] <A HREF="http://www.rsa.com/rsalabs/node.asp?id=2127">http://www.rsa.com/rsalabs/node.asp?id=2127</A>

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>