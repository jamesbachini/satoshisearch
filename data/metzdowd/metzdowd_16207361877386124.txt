<PRE>|<i> &gt; &gt; Funnily enough I was just working on this -- and found that we'd
</I>|<i> &gt; &gt; end up adding a couple megabytes to every browser.  #DEFINE
</I>|<i> &gt; &gt; NONSTARTER.  I am curious about the feasibility of a large bloom
</I>|<i> &gt; &gt; filter that fails back to online checking though.  This has side
</I>|<i> &gt; &gt; effects but perhaps they can be made statistically very unlikely,
</I>|<i> &gt; &gt; without blowing out the size of a browser.
</I>|<i> &gt; Why do you say a couple of megabytes? 99% of the value would be
</I>|<i> &gt; 1024-bit RSA keys. There are ~32,000 such keys. If you devote an
</I>|<i> &gt; 80-bit hash to each one (which is easily large enough to give you a
</I>|<i> &gt; vanishingly small false positive probability; you could probably get
</I>|<i> &gt; away with 64 bits), that's 320KB.  Given that the smallest Firefox
</I>|<i> &gt; [...]
</I>You can get by with a lot less than 64 bits.  People see problems like
this and immediately think &quot;birthday paradox&quot;, but there is no &quot;birthday
paradox&quot; here:  You aren't look for pairs in an ever-growing set,
you're looking for matches against a fixed set.  If you use 30-bit
hashes - giving you about a 120KB table - the chance that any given
key happens to hash to something in the table is one in a billion,
now and forever.  (Of course, if you use a given key repeatedly, and
it happens to be that 1 in a billion, it will hit every time.  So an
additional table of &quot;known good keys that happen to collide&quot; is worth
maintaining.  Even if you somehow built and maintained that table for
all the keys across all the systems in the world - how big would it
get, if only 1 in a billion keys world-wide got entered?)

|<i> You could store {&lt;hash&gt;, &lt;seed&gt;} and check matches for false positives
</I>|<i> by generating a key with the corresponding seed and then checking for an
</I>|<i> exact match -- slow, but rare.  This way you could choose your false
</I>|<i> positive rate / table size comfort zone and vary the size of the hash
</I>|<i> accordingly.
</I>Or just go off to one of a number of web sites that have a full table.
Many solutions are possible, when they only need to be invoked very,
very rarely.
							-- Jerry

|<i> Nico
</I>|<i> -- 
</I>|<i> 
</I>|<i> ---------------------------------------------------------------------
</I>|<i> The Cryptography Mailing List
</I>|<i> Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>
</I>|<i> 
</I>|<i> 
</I>
---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>