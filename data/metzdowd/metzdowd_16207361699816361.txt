<PRE>At Thu, 7 Feb 2008 10:34:42 -0500 (EST),
Leichter, Jerry wrote:
&gt;<i> | Since (by definition) you don't have a copy of the packet you've lost,
</I>&gt;<i> | you need a MAC that survives that--and is still compact. This makes
</I>&gt;<i> | life rather more complicated. I'm not up on the most recent lossy
</I>&gt;<i> | MACing literature, but I'm unaware of any computationally efficient
</I>&gt;<i> | technique which has a MAC of the same size with a similar security
</I>&gt;<i> | level. (There's an inefficient technique of having the MAC cover all
</I>&gt;<i> | 2^50 combinations of packet loss, but that's both prohibitively
</I>&gt;<i> | expensive and loses you significant security.)
</I>&gt;<i> My suggestion for a quick fix:  There's some bound on the packet loss
</I>&gt;<i> rate beyond which your protocol will fail for other reasons.  If you
</I>&gt;<i> maintain separate MAC's for each k'th packet sent, and then deliver k
</I>&gt;<i> checksums periodically - with the collection of checksums itself MAC'ed,
</I>&gt;<i> a receiver should be able to check most of the checksums, and can reset
</I>&gt;<i> itself for the others (assuming you use a checksum with some kind of
</I>&gt;<i> prefix-extension property; you may have to send redundant information
</I>&gt;<i> to allow that, or allow the receiver to ask for more info to recover).
</I>
So, this issue has been addressed in the broadcast signature context
where you do a two-stage hash-and-sign reduction (cf. [PG01]), but
when this only really works because hashes are a lot more efficient
than signatures. I don't see why it helps with MACs.


&gt;<i> Obviously, if you *really* use every k'th packet to define what is in
</I>&gt;<i> fact a substream, an attacker can arrange to knock out the substream he
</I>&gt;<i> has chosen to attack.  So you use your encryptor to permute the
</I>&gt;<i> substreams, so there's no way to tell from the outside which packet is
</I>&gt;<i> part of which substream.  Also, you want to make sure that a packet
</I>&gt;<i> containing checksums is externally indistinguishable from one containing
</I>&gt;<i> data.  Finally, the checksum packet inherently has higher - and much
</I>&gt;<i> longer-lived - semantic value, so you want to be able to request that
</I>&gt;<i> *it* be resent.  Presumably protocols that are willing to survive data
</I>&gt;<i> loss still have some mechanism for control information and such that
</I>&gt;<i> *must* be delivered, even if delayed.
</I>
This basically doesn't work for VoIP, where latency is a real issue.


-Ekr

[PG01] Philippe Golle, Nagendra Modadugu: Authenticating Streamed Data in the Presence of
Random Packet Loss. NDSS 2001

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>