<PRE>On Mon, Jul 21, 2008 at 8:33 AM, Matt Ball &lt;<A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">matt.ball at ieee.org</A>&gt; wrote:
&gt;<i>
</I>&gt;<i>    &quot;If someone uses the __random32 function as defined in the 2.6.26
</I>&gt;<i> Linux kernel, and leaks to you the result of taking successive outputs
</I>&gt;<i> modulo 28233 (= 9 * 3137), can you determine the probable 96-bit
</I>&gt;<i> internal state with fewer than 1000 outputs and with modest processing
</I>&gt;<i> power (e.g., a laptop computer running less than a day)?&quot;
</I>&gt;<i>
</I>
Another attacking avenue is the 32-bit initial seed.  If the
implementation re-seeds frequently, or leaks to you the first outputs
after initialization, then you only have to brute-force the 32-bit
seed space, times the number of samples since reseeding.

Here is the function that performs the initial seeding, based on a 32-bit seed:

static void __set_random32(struct rnd_state *state, unsigned long s)
{
        if (s == 0)
                s = 1;      /* default seed is 1 */
#define LCG(n) (69069 * n)
        state-&gt;s1 = LCG(s);
        state-&gt;s2 = LCG(state-&gt;s1);
        state-&gt;s3 = LCG(state-&gt;s2);
        /* &quot;warm it up&quot; */
        __random32(state);
        __random32(state);
        __random32(state);
        __random32(state);
        __random32(state);
        __random32(state);
}

For those who want to get cleaver, I suspect there is an optimization
for running __random32 six times.

--
Thanks!
Matt Ball, IEEE P1619.x SISWG Chair
M.V. Ball Technical Consulting, Inc.
Phone: 303-469-2469, Cell: 303-717-2717
<A HREF="http://www.mvballtech.com">http://www.mvballtech.com</A>
<A HREF="http://www.linkedin.com/in/matthewvball">http://www.linkedin.com/in/matthewvball</A>

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending &quot;unsubscribe cryptography&quot; to <A HREF="http://www.metzdowd.com/mailman/listinfo/cryptography">majordomo at metzdowd.com</A>

</PRE>